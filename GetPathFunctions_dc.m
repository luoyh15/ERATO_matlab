function pF = GetPathFunctions_dc(psi,psidata,psiF)
% this function gets the path functions of the flux surfaces of value psi
% input: psi
%        the psi value of every flux surfaces
%        make sure psi is a column vector
% output: pF
%         cell array same size with psi, each cell containing the
%         infomation of path function of the corresponding psi value
%         pF{i}.functions ([m,3] double):containing all the path functions'
%         coefficients which are the form psi = c1*r + c2*z + c3
%         pF{i}.points ([m+1,2] double):containing the start and end points
%         of corresponding path function
%         m is the number of segment functions of that path

%% input psi must be a column vector
if size(psi,2)~=1
    error('make sure ''psi'' is a column vector');
end

% number of flux surface that need calculated
n_psi = size(psi,1);
% initialization
pF  = cell(size(psi));
% treat the region near magnetic axis as analytic
n_ana = length(psi(psi<psiF.psi_ana));
fpsi = psiF.analyticF;
rhomax_ana = psiF.rhomax_ana;
r_magaxis = psiF.r_magaxis;
% number of lines that for the segment path function
n_lines = 3;
for i = 1:n_ana
    psii = psi(i);
    % initialization
    fpsi_path = cell(n_lines,1);% list containing all the segment psi functions
    fpsiDr_path = cell(n_lines,1);
    fpsiDz_path = cell(n_lines,1);
    fpsiGradNorm_path = cell(n_lines,1);
    fpsiGrad2Dpsi_path = cell(n_lines,1);
    flnpsiGradNormDpsi_path = cell(n_lines,1);
    flnrDpsi_path = cell(n_lines,1);
    fr_path = cell(n_lines,1);
    fz_path = cell(n_lines,1);
    dl_path = cell(n_lines,1);
    dr_path = cell(n_lines,1);
    Interval_path = zeros(n_lines,2);
    point_path = zeros(n_lines+1,2);% list containing the start and end points of the corresponding line
    
    theta_total = linspace(0,pi,n_lines+1);
    % the first point of this path surface
    p_start = FindIntesectionPointAna(fpsi,psii,0,r_magaxis,rhomax_ana);
    point_path(1,:) = p_start;
    
    for j= 2:n_lines+1
        theta_temp = theta_total(j);
        p_next = FindIntesectionPointAna(fpsi,psii,theta_temp,r_magaxis,rhomax_ana);
        % get the information of the current part of path function
        [fr,fz,dl,dr,Interval] = SolvePathFunctionAna(fpsi,psii,point_path(j-1,:),p_next);
        % get function fpsi's derivatives using in the calculating relevent quantities
        [fpsiDr,fpsiDz,fpsiGradNorm,fpsiGrad2Dpsi,flnpsiGradNormDpsi,flnrDpsi] = GetPsiDerivativeAna(fpsi);
        
        i_count = j-1;
        fpsi_path{i_count,1} = fpsi;
        fpsiDr_path{i_count,1} = fpsiDr;
        fpsiDz_path{i_count,1} = fpsiDz;
        fpsiGradNorm_path{i_count,1} = fpsiGradNorm;
        fpsiGrad2Dpsi_path{i_count,1} = fpsiGrad2Dpsi;
        flnpsiGradNormDpsi_path{i_count,1} = flnpsiGradNormDpsi;
        flnrDpsi_path{i_count,1} = flnrDpsi;
        fr_path{i_count,1} = fr;
        fz_path{i_count,1} = fz;
        dl_path{i_count,1} = dl;
        dr_path{i_count,1} = dr;
        Interval_path(i_count,:) = Interval;
        
        point_path(i_count+1,:) = p_next;% store next point
        %         plot(point_path([end-1,end],1),point_path([end-1,end],2),'k');
    end
    pF{i}.fpsis = fpsi_path;
    pF{i}.fpsiDrs = fpsiDr_path;
    pF{i}.fpsiDzs = fpsiDz_path;
    pF{i}.fpsiGradNorms = fpsiGradNorm_path;
    pF{i}.fpsiGrad2Dpsis = fpsiGrad2Dpsi_path;
    pF{i}.flnpsiGradNormDpsis = flnpsiGradNormDpsi_path;
    pF{i}.flnrDpsis = flnrDpsi_path;
    
    pF{i}.frs = fr_path;
    pF{i}.fzs = fz_path;
    pF{i}.dls = dl_path;
    pF{i}.drs = dr_path;
    pF{i}.Intervals = Interval_path;
    
    pF{i}.points = point_path;
end

%% get the path functions of one specific psi value not analytic
n_theta = psidata.ntheta/2;
for i = n_ana+1:n_psi
    % for j = 78:n_psi
    psii = psi(i);
    
    % initialization
    fpsi_path = cell(n_theta,1);% list containing all the segment psi functions
    fpsiDr_path = cell(n_theta,1);
    fpsiDz_path = cell(n_theta,1);
    fpsiGradNorm_path = cell(n_theta,1);
    fpsiGrad2Dpsi_path = cell(n_theta,1);
    flnpsiGradNormDpsi_path = cell(n_theta,1);
    flnrDpsi_path = cell(n_theta,1);
    fr_path = cell(n_theta,1);
    fz_path = cell(n_theta,1);
    dl_path = cell(n_theta,1);
    dr_path = cell(n_theta,1);
    Interval_path = zeros(n_theta,2);
    point_path = zeros(n_theta+1,2);% list containing the start and end points of the corresponding line
    
    [p_start,p_next,sector_index] = FindFirstSector(psiF,psidata,psii);
    point_path(1,:) = p_start;
    coeff = psiF.sectorsF{sector_index,1};
    fpsi = getFunPsi(coeff);
    % get the information of the path function
    [fr,fz,dl,dr,Interval] = SolvePathFunction(coeff,psii,point_path(1,:),p_next);
    % get function fpsi's derivatives using in the calculating relevent quantities
    [fpsiDr,fpsiDz,fpsiGradNorm,fpsiGrad2Dpsi,flnpsiGradNormDpsi,flnrDpsi] = GetPsiDerivative(coeff);
    
    i_count = 1;% to count the number of triangulars in the path
    fpsi_path{i_count,1} = fpsi;
    fpsiDr_path{i_count,1} = fpsiDr;
    fpsiDz_path{i_count,1} = fpsiDz;
    fpsiGradNorm_path{i_count,1} = fpsiGradNorm;
    fpsiGrad2Dpsi_path{i_count,1} = fpsiGrad2Dpsi;
    flnpsiGradNormDpsi_path{i_count,1} = flnpsiGradNormDpsi;
    flnrDpsi_path{i_count,1} = flnrDpsi;
    fr_path{i_count,1} = fr;
    fz_path{i_count,1} = fz;
    dl_path{i_count,1} = dl;
    dr_path{i_count,1} = dr;
    Interval_path(i_count,:) = Interval;
    point_path(i_count+1,:) = p_next;% store next point
%     % plot the flux surface
%     figure(1);hold on;
%     xx = linspace(Interval(1),Interval(2),10);
%     plot(fr(xx),fz(xx),'k');
    for j = 2:n_theta
        %         if isempty(tri_next)
        %             error('can not find next triangle');
        %         end
        % get psi function by fit to 'poly22'
        coeff = psiF.sectorsF{sector_index,j};
        fpsi = getFunPsi(coeff);
        % get  next trianglar infomation
        p_next = FindNextSector(fpsi,psii,psidata,sector_index,j);
        
        % determine which coordinate as integrat variable
        [fr,fz,dl,dr,Interval] = SolvePathFunction(coeff,psii,point_path(j,:),p_next);
        % get function fpsi's derivatives using in the calculating relevent quantities
        [fpsiDr,fpsiDz,fpsiGradNorm,fpsiGrad2Dpsi,flnpsiGradNormDpsi,flnrDpsi] = GetPsiDerivative(coeff);
        
        i_count = j;
        fpsi_path{i_count,1} = fpsi;
        fpsiDr_path{i_count,1} = fpsiDr;
        fpsiDz_path{i_count,1} = fpsiDz;
        fpsiGradNorm_path{i_count,1} = fpsiGradNorm;
        fpsiGrad2Dpsi_path{i_count,1} = fpsiGrad2Dpsi;
        flnpsiGradNormDpsi_path{i_count,1} = flnpsiGradNormDpsi;
        flnrDpsi_path{i_count,1} = flnrDpsi;
        
        fr_path{i_count,1} = fr;
        fz_path{i_count,1} = fz;
        dl_path{i_count,1} = dl;
        dr_path{i_count,1} = dr;
        Interval_path(i_count,:) = Interval;
        
        point_path(i_count+1,:) = p_next;% store next point
        
%         % plot the flux surface
%         figure(1);hold on;
%         xx = linspace(Interval(1),Interval(2),10);
%         plot(fr(xx),fz(xx),'k');
        
    end
    pF{i}.fpsis = fpsi_path;
    pF{i}.fpsiDrs = fpsiDr_path;
    pF{i}.fpsiDzs = fpsiDz_path;
    pF{i}.fpsiGradNorms = fpsiGradNorm_path;
    pF{i}.fpsiGrad2Dpsis = fpsiGrad2Dpsi_path;
    pF{i}.flnpsiGradNormDpsis = flnpsiGradNormDpsi_path;
    pF{i}.flnrDpsis = flnrDpsi_path;
    
    pF{i}.frs = fr_path;
    pF{i}.fzs = fz_path;
    pF{i}.dls = dl_path;
    pF{i}.drs = dr_path;
    pF{i}.Intervals = Interval_path;
    
    pF{i}.points = point_path;
end
end


    function [p_start,p_next,sector_index] = FindFirstSector(psiF,psidata,psii)
        sector_index = sum(psidata.psi(:,1)<psii);
        coeff = psiF.sectorsF{sector_index,1};
        fpsi = getFunPsi(coeff);
        vertex1 = [psidata.R(sector_index,1),psidata.Z(sector_index,1)];
        vertex2 = [psidata.R(sector_index+1,1),psidata.Z(sector_index+1,1)];
        % start point
        p_start = FindIntesectionPoint(@(r,z)fpsi(r,z)-psii,vertex1,vertex2);
        if isempty(p_start)
            error('start point not found');
        end
        vertex3 = [psidata.R(sector_index,2),psidata.Z(sector_index,2)];
        vertex4 = [psidata.R(sector_index+1,2),psidata.Z(sector_index+1,2)];
        % next point
        p_next = FindIntesectionPoint(@(r,z)fpsi(r,z)-psii,vertex3,vertex4);
        if isempty(p_next)
            error('next point not found');
        end
%         % plot the sector
%         xx=[vertex1;vertex2;vertex4;vertex3];
%         patch(xx(:,1),xx(:,2),'r');
    end

    function p_next = FindNextSector(fpsi,psii,psidata,i,j)
        vertex1 = [psidata.R(i,j+1),psidata.Z(i,j+1)];
        vertex2 = [psidata.R(i+1,j+1),psidata.Z(i+1,j+1)];
        % next point
        p_next = FindIntesectionPoint(@(r,z)fpsi(r,z)-psii,vertex1,vertex2); 
        if isempty(p_next)
            error('next point not found');
        end
        
%         % plot the sector
%         vertex3 = [psidata.R(i,j),psidata.Z(i,j)];
%         vertex4 = [psidata.R(i+1,j),psidata.Z(i+1,j)];
%         xx=[vertex1;vertex2;vertex4;vertex3];
%         patch(xx(:,1),xx(:,2),'r');
    end
    function fpsi = getFunPsi(coeff)
    fpsi = @(r,z) coeff.p00+coeff.p10*r+coeff.p01*z+coeff.p20*r.^2+coeff.p11*r.*z+coeff.p02*z.^2;
    end
    function fpsi = PsiFitFunctionOrder1(TR,psidata,tri_index)
        p_total = TR.ConnectivityList(tri_index,:);
        p_fit_index = p_total;
        psi_fit_value = psidata(p_fit_index);
        p_fit_coordinates = TR.Points(p_fit_index,:);
        fpsi = fit([p_fit_coordinates(:,1),p_fit_coordinates(:,2)],psi_fit_value,'poly11');
    end

    function p = FindIntesectionPoint(fpath,p1,p2)
        a = p2(2)-p1(2);
        b = -(p2(1)-p1(1));
        c = -a*p1(1)-b*p1(2);
        if a==0&&b==0
            error('please input two different points of a line');
        elseif abs(b)>abs(a)
            fz_temp = @(r) -(a*r+c)/b;
            % if there is no intersection between fpath and line[p1,p2]
            if fpath(p1(1),fz_temp(p1(1)))*fpath(p2(1),fz_temp(p2(1)))>0
                p = [];
            else
                r = fzero(@(r) fpath(r,fz_temp(r)),[p1(1),p2(1)]);
                z = fz_temp(r);
                p = [r,z];
            end
        else
            fr_temp = @(z) -(b*z+c)/a;
            if fpath(fr_temp(p1(2)),p1(2))*fpath(fr_temp(p2(2)),p2(2))>0
                p = [];
            else
                z = fzero(@(z) fpath(fr_temp(z),z),[p1(2),p2(2)]);
                r = fr_temp(z);
                p = [r,z];
            end
        end
    end

    function  p = FindIntesectionPointAna(fpsi,psii,theta,r_magaxis,rhomax_ana)
        fpath = @(rho,theta) fpsi((rho*cos(theta)+r_magaxis).^2,(rho*sin(theta)).^2)-psii;
        rho = fzero(@(rho) fpath(rho,theta),[0,rhomax_ana]);
        r = rho*cos(theta)+r_magaxis;
        z = rho*sin(theta);
        p = [r,z];
    end
   
    function [fpsiDr_rz,fpsiDz_rz,fpsiGradNorm_rz,fpsiGrad2Dpsi_rz,flnpsiGradNormDpsi_rz,flnrDpsi_rz] = GetPsiDerivativeAna(fpsi)
        c2 = fpsi.p10;c3 = fpsi.p01;
        c4 = fpsi.p20;c5 = fpsi.p11;c6 = fpsi.p02;
        c7 = fpsi.p30;c8 = fpsi.p21;c9 = fpsi.p12;c10 = fpsi.p03;
        fpsiDr_rz = @(r,z)c2.*r.*2.0+c4.*r.^3.*4.0+c7.*r.^5.*6.0+c5.*r.*z.^2.*2.0+c9.*r.*z.^4.*2.0+c8.*r.^3.*z.^2.*4.0;
        fpsiDz_rz = @(r,z)c3.*z.*2.0+c6.*z.^3.*4.0+c10.*z.^5.*6.0+c5.*r.^2.*z.*2.0+c8.*r.^4.*z.*2.0+c9.*r.^2.*z.^3.*4.0;
        fpsiGradNorm_rz = @(r,z) sqrt(fpsiDr_rz(r,z).^2+fpsiDz_rz(r,z).^2);
        fpsiGrad2Dr_rz = @(r,z)(c2.*r.*2.0+c4.*r.^3.*4.0+c7.*r.^5.*6.0+c5.*r.*z.^2.*2.0+c9.*r.*z.^4.*2.0+c8.*r.^3.*z.^2.*4.0).*(c2.*2.0+c4.*r.^2.*1.2e1+c7.*r.^4.*3.0e1+c5.*z.^2.*2.0+c9.*z.^4.*2.0+c8.*r.^2.*z.^2.*1.2e1).*2.0+(c8.*r.^3.*z.*8.0+c9.*r.*z.^3.*8.0+c5.*r.*z.*4.0).*(c3.*z.*2.0+c6.*z.^3.*4.0+c10.*z.^5.*6.0+c5.*r.^2.*z.*2.0+c8.*r.^4.*z.*2.0+c9.*r.^2.*z.^3.*4.0).*2.0;
        fpsiGrad2Dz_rz = @(r,z)(c3.*z.*2.0+c6.*z.^3.*4.0+c10.*z.^5.*6.0+c5.*r.^2.*z.*2.0+c8.*r.^4.*z.*2.0+c9.*r.^2.*z.^3.*4.0).*(c3.*2.0+c5.*r.^2.*2.0+c8.*r.^4.*2.0+c6.*z.^2.*1.2e1+c10.*z.^4.*3.0e1+c9.*r.^2.*z.^2.*1.2e1).*2.0+(c8.*r.^3.*z.*8.0+c9.*r.*z.^3.*8.0+c5.*r.*z.*4.0).*(c2.*r.*2.0+c4.*r.^3.*4.0+c7.*r.^5.*6.0+c5.*r.*z.^2.*2.0+c9.*r.*z.^4.*2.0+c8.*r.^3.*z.^2.*4.0).*2.0;
        
        fpsiGrad2Dpsi_rz = @(r,z) (fpsiGrad2Dr_rz(r,z).*fpsiDr_rz(r,z)+fpsiGrad2Dz_rz(r,z).*fpsiDz_rz(r,z))./fpsiGradNorm_rz(r,z).^2;
        flnpsiGradNormDpsi_rz = @(r,z) fpsiGrad2Dpsi_rz(r,z)./(2*fpsiGradNorm_rz(r,z).^2);
        flnrDpsi_rz = @(r,z) 1./r.*fpsiDr_rz(r,z)./fpsiGradNorm_rz(r,z).^2;
    end
    function [fpsiDr_rz,fpsiDz_rz,fpsiGradNorm_rz,fpsiGrad2Dpsi_rz,flnpsiGradNormDpsi_rz,flnrDpsi_rz] = GetPsiDerivative(fpsi)
        c2 = fpsi.p10;c3 = fpsi.p01;
        c4 = fpsi.p20;c5 = fpsi.p11;c6 = fpsi.p02;
        fpsiDr_rz = @(r,z) c2 + 2*c4*r + c5*z;
        fpsiDz_rz = @(r,z) c3 + c5*r + 2*c6*z;
        fpsiGradNorm_rz = @(r,z) sqrt(fpsiDr_rz(r,z).^2+fpsiDz_rz(r,z).^2);
        fpsiGrad2Dr_rz = @(r,z) 4*c4*(c2 + 2*c4*r + c5*z) + 2*c5*(c3 + c5*r + 2*c6*z);
        fpsiGrad2Dz_rz = @(r,z) 2*c5*(c2 + 2*c4*r + c5*z) + 4*c6*(c3 + c5*r + 2*c6*z);
        
        fpsiGrad2Dpsi_rz = @(r,z) (fpsiGrad2Dr_rz(r,z).*fpsiDr_rz(r,z)+fpsiGrad2Dz_rz(r,z).*fpsiDz_rz(r,z))./fpsiGradNorm_rz(r,z).^2;
        flnpsiGradNormDpsi_rz = @(r,z) fpsiGrad2Dpsi_rz(r,z)./(2*fpsiGradNorm_rz(r,z).^2);
        flnrDpsi_rz = @(r,z) 1./r.*fpsiDr_rz(r,z)./fpsiGradNorm_rz(r,z).^2;
    end

    function [fr,fz,dl,dr,Interval] = SolvePathFunctionAna(fpsi,psi,p1,p2)
        % make sure the fit function is in the form of 'poly33'
        c1 = fpsi.p00-psi;c2 = fpsi.p10;c3 = fpsi.p01;
        c4 = fpsi.p20;c5 = fpsi.p11;c6 = fpsi.p02;
        c7 = fpsi.p30;c8 = fpsi.p21;c9 = fpsi.p12;c10 = fpsi.p03;
        if abs(p2(1)-p1(1))<abs(p2(2)-p1(2))
            % the three roots of the 'poly33' function
            fr2_1 = @(z) (c4.*(-1.0./3.0)-c8.*z.*(1.0./3.0))./c7+(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0)+((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0);
            fr2_2 = @(z) (c4.*(-1.0./3.0)-c8.*z.*(1.0./3.0))./c7-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)-((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)-sqrt(3.0).*((1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0)-((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0)).*5.0e-1i;
            fr2_3 = @(z) (c4.*(-1.0./3.0)-c8.*z.*(1.0./3.0))./c7-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)-((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)+sqrt(3.0).*((1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0)-((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0)).*5.0e-1i;
            fr1 = @(z) sqrt(fr2_1(z.^2));
            fr2 = @(z) sqrt(fr2_2(z.^2));
            fr3 = @(z) sqrt(fr2_3(z.^2));
            if abs(fr1(p2(2))-p2(1))<(p2(1)*1e-6)
                fr = fr1;
                fr2dz2 = @(z) -((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0)+1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(2.0./3.0).*(1.0./sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^2.*3.0+((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).*((c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7-1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)-1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)+1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*2.0).*(1.0./2.0)-(c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7+1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)+1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)-1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*(1.0./3.0)-(c8.*(1.0./3.0))./c7-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(4.0./3.0).*(1.0./sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^2.*3.0+((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).*((c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7-1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)-1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)+1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*2.0).*(1.0./2.0)-(c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7+1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)+1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)-1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*(1.0./3.0);
            elseif abs(fr2(p2(2))-p2(1))<(p2(1)*1e-6)
                fr = fr2;
                fr2dz2 = @(z) ((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)-1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(2.0./3.0).*(1.0./sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^2.*3.0+((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).*((c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7-1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)-1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)+1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*2.0).*(1.0./2.0)-(c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7+1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)+1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)-1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*(1.0./6.0)-(c8.*(1.0./3.0))./c7+sqrt(3.0).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0)+1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(2.0./3.0).*(1.0./sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^2.*3.0+((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).*((c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7-1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)-1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)+1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*2.0).*(1.0./2.0)-(c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7+1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)+1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)-1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*(1.0./3.0)+(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(4.0./3.0).*(1.0./sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^2.*3.0+((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).*((c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7-1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)-1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)+1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*2.0).*(1.0./2.0)-(c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7+1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)+1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)-1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*(1.0./3.0)).*5.0e-1i+(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(4.0./3.0).*(1.0./sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^2.*3.0+((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).*((c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7-1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)-1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)+1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*2.0).*(1.0./2.0)-(c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7+1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)+1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)-1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*(1.0./6.0);
            elseif abs(fr3(p2(2))-p2(1))<(p2(1)*1e-6)
                fr = fr3;
                fr2dz2 = @(z) ((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)-1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(2.0./3.0).*(1.0./sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^2.*3.0+((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).*((c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7-1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)-1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)+1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*2.0).*(1.0./2.0)-(c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7+1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)+1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)-1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*(1.0./6.0)-(c8.*(1.0./3.0))./c7-sqrt(3.0).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(1.0./3.0)+1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(2.0./3.0).*(1.0./sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^2.*3.0+((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).*((c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7-1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)-1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)+1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*2.0).*(1.0./2.0)-(c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7+1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)+1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)-1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*(1.0./3.0)+(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(4.0./3.0).*(1.0./sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^2.*3.0+((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).*((c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7-1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)-1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)+1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*2.0).*(1.0./2.0)-(c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7+1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)+1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)-1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*(1.0./3.0)).*5.0e-1i+(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).*1.0./((c1.*(-1.0./2.0)-c3.*z.*(1.0./2.0)-c6.*z.^2.*(1.0./2.0)-c10.*z.^3.*(1.0./2.0))./c7+sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3)-1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)+1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^(4.0./3.0).*(1.0./sqrt(((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).^2-(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^3).*(((c5.*(1.0./3.0)+c9.*z.*(2.0./3.0))./c7-1.0./c7.^2.*c8.*(c4+c8.*z).*(2.0./9.0)).*(1.0./c7.^2.*(c4+c8.*z).^2.*(1.0./9.0)-(c2.*(1.0./3.0)+c5.*z.*(1.0./3.0)+c9.*z.^2.*(1.0./3.0))./c7).^2.*3.0+((c1.*(1.0./2.0)+c3.*z.*(1.0./2.0)+c6.*z.^2.*(1.0./2.0)+c10.*z.^3.*(1.0./2.0))./c7+1.0./c7.^3.*(c4+c8.*z).^3.*(1.0./2.7e1)-1.0./c7.^2.*(c4+c8.*z).*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)).*((c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7-1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)-1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)+1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*2.0).*(1.0./2.0)-(c3.*(1.0./2.0)+c6.*z+c10.*z.^2.*(3.0./2.0))./c7+1.0./c7.^2.*(c4+c8.*z).*(c5+c9.*z.*2.0).*(1.0./6.0)+1.0./c7.^2.*c8.*(c2+c5.*z+c9.*z.^2).*(1.0./6.0)-1.0./c7.^3.*c8.*(c4+c8.*z).^2.*(1.0./9.0)).*(1.0./6.0);
            else
                error('path function not exist');
            end
            frdz = @(z) z./fr(z).*fr2dz2(z.^2);
            fz = @(z) z;
            dr = frdz;
            Interval = [p1(2),p2(2)];
            
            if p1(2)>p2(2)
                dl = @(z) -sqrt(1+frdz(z).^2);
            else
                dl = @(z) sqrt(1+frdz(z).^2);
            end
        else
            fz2_1 = @(r)(c6.*(-1.0./3.0)-c9.*r.*(1.0./3.0))./c10+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0)+(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0);
            fz2_2 = @(r)(c6.*(-1.0./3.0)-c9.*r.*(1.0./3.0))./c10-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)-(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)-sqrt(3.0).*((1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0)-(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0)).*5.0e-1i;
            fz2_3 = @(r)(c6.*(-1.0./3.0)-c9.*r.*(1.0./3.0))./c10-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)-(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)+sqrt(3.0).*((1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0)-(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0)).*5.0e-1i;
            fz1 = @(r) sqrt(fz2_1(r.^2));
            fz2 = @(r) sqrt(fz2_2(r.^2));
            fz3 = @(r) sqrt(fz2_3(r.^2));
            if abs(fz1(p2(1))-p2(2))<(p2(2)*1e-6)
                fz = fz1;
                fz2dr2 = @(r)(c9.*(-1.0./3.0))./c10-((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0)+1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(2.0./3.0).*((((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).*((c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10-1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)-c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)+c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*2.0+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^2.*((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*3.0).*1.0./sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3).*(1.0./2.0)-(c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10+1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)+c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)-c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*(1.0./3.0)-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(4.0./3.0).*((((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).*((c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10-1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)-c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)+c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*2.0+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^2.*((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*3.0).*1.0./sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3).*(1.0./2.0)-(c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10+1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)+c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)-c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*(1.0./3.0);
            elseif abs(fz2(p2(1))-p2(2))<(p2(2)*1e-6)
                fz = fz2;
                fz2dr2 = @(r)(c9.*(-1.0./3.0))./c10+((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)+sqrt(3.0).*(((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0)+1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(2.0./3.0).*((((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).*((c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10-1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)-c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)+c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*2.0+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^2.*((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*3.0).*1.0./sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3).*(1.0./2.0)-(c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10+1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)+c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)-c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*(1.0./3.0)+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(4.0./3.0).*((((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).*((c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10-1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)-c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)+c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*2.0+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^2.*((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*3.0).*1.0./sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3).*(1.0./2.0)-(c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10+1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)+c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)-c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*(1.0./3.0)).*5.0e-1i-1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(2.0./3.0).*((((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).*((c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10-1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)-c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)+c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*2.0+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^2.*((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*3.0).*1.0./sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3).*(1.0./2.0)-(c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10+1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)+c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)-c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*(1.0./6.0)+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(4.0./3.0).*((((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).*((c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10-1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)-c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)+c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*2.0+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^2.*((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*3.0).*1.0./sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3).*(1.0./2.0)-(c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10+1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)+c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)-c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*(1.0./6.0);
            elseif abs(fz3(p2(1))-p2(2))<(p2(2)*1e-6)
                fz = fz3;
                fz2dr2 = @(r)(c9.*(-1.0./3.0))./c10+((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0).*(1.0./2.0)-sqrt(3.0).*(((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(1.0./3.0)+1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(2.0./3.0).*((((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).*((c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10-1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)-c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)+c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*2.0+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^2.*((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*3.0).*1.0./sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3).*(1.0./2.0)-(c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10+1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)+c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)-c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*(1.0./3.0)+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(4.0./3.0).*((((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).*((c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10-1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)-c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)+c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*2.0+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^2.*((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*3.0).*1.0./sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3).*(1.0./2.0)-(c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10+1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)+c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)-c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*(1.0./3.0)).*5.0e-1i-1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(2.0./3.0).*((((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).*((c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10-1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)-c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)+c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*2.0+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^2.*((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*3.0).*1.0./sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3).*(1.0./2.0)-(c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10+1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)+c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)-c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*(1.0./6.0)+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).*1.0./(sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3)-(c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10-1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)+1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^(4.0./3.0).*((((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).*((c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10-1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)-c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)+c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*2.0+(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^2.*((c5.*(1.0./3.0)+c8.*r.*(2.0./3.0))./c10-c9.*1.0./c10.^2.*(c6+c9.*r).*(2.0./9.0)).*3.0).*1.0./sqrt(((c1.*(1.0./2.0)+c2.*r.*(1.0./2.0)+c4.*r.^2.*(1.0./2.0)+c7.*r.^3.*(1.0./2.0))./c10+1.0./c10.^3.*(c6+c9.*r).^3.*(1.0./2.7e1)-1.0./c10.^2.*(c6+c9.*r).*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)).^2-(1.0./c10.^2.*(c6+c9.*r).^2.*(1.0./9.0)-(c3.*(1.0./3.0)+c5.*r.*(1.0./3.0)+c8.*r.^2.*(1.0./3.0))./c10).^3).*(1.0./2.0)-(c2.*(1.0./2.0)+c4.*r+c7.*r.^2.*(3.0./2.0))./c10+1.0./c10.^2.*(c5+c8.*r.*2.0).*(c6+c9.*r).*(1.0./6.0)+c9.*1.0./c10.^2.*(c3+c5.*r+c8.*r.^2).*(1.0./6.0)-c9.*1.0./c10.^3.*(c6+c9.*r).^2.*(1.0./9.0)).*(1.0./6.0);
            else
                error('path function not exist');
            end
            fzdr = @(r) r./fz(r).*fz2dr2(r.^2);
            fr = @(r) r;
            dr = @(r) 1;
            Interval = [p1(1),p2(1)];
            
            if p1(1)>p2(1)
                dl = @(r) -sqrt(1+fzdr(r).^2);
            else
                dl = @(r) sqrt(1+fzdr(r).^2);
            end
        end
    end

    function [fr,fz,dl,dr,Interval] = SolvePathFunction(fpsi,psi,p1,p2)
        % make sure the fit function is in the form of 'poly22'
        c1 = fpsi.p00-psi;c2 = fpsi.p10;c3 = fpsi.p01;
        c4 = fpsi.p20;c5 = fpsi.p11;c6 = fpsi.p02;
        if abs(p2(1)-p1(1))<abs(p2(2)-p1(2))
            if abs(p2(2)-p1(2))<1e-4% two points are too close
                fr = @(z) p2(1);
                frdz = @(z) 0;
            elseif c4==0
                fr = @(z)-(c1+c3.*z+c6.*z.^2)./(c2+c5.*z);
                frdz = @(z)-(c3+c6.*z.*2.0)./(c2+c5.*z)+c5.*1.0./(c2+c5.*z).^2.*(c1+c3.*z+c6.*z.^2);
            else
                fr1 = @(z) -(c2 + c5*z - ((c2 + c5*z).^2 - c4*(4*c6*z.^2 + 4*c3*z + 4*c1)).^(1/2))/(2*c4);
                fr2 = @(z) -(c2 + c5*z + ((c2 + c5*z).^2 - c4*(4*c6*z.^2 + 4*c3*z + 4*c1)).^(1/2))/(2*c4);
                
                if abs(fr1(p2(2))-p2(1))<(p2(1)*1e-3)
                    fr = fr1;
                    frdz = @(z) -(c5 + (c4*(4*c3 + 8*c6*z) - 2*c5*(c2 + c5*z))./(2*((c2 + c5*z).^2 - c4*(4*c6*z.^2 + 4*c3*z + 4*c1)).^(1/2)))/(2*c4);
                elseif abs(fr2(p2(2))-p2(1))<(p2(1)*1e-3)
                    fr = fr2;
                    frdz = @(z) -(c5 - (c4*(4*c3 + 8*c6*z) - 2*c5*(c2 + c5*z))./(2*((c2 + c5*z).^2 - c4*(4*c6*z.^2 + 4*c3*z + 4*c1)).^(1/2)))/(2*c4);
                else
                    error('path function not exist');
                end
            end
            fz = @(z) z;
            dr = frdz;
            Interval = [p1(2),p2(2)];
            
            if p1(2)>p2(2)
                dl = @(z) -sqrt(1+frdz(z).^2);
            else
                dl = @(z) sqrt(1+frdz(z).^2);
            end
        else
            if abs(p2(1)-p1(1))<1e-4% two points are too close
                fz = @(r) p2(2);
                fzdr = @(r) 0;
            elseif c6==0
                fz = @(r)-(c1+c2.*r+c4.*r.^2)./(c3+c5.*r);
                fzdr = @(r)-(c2+c4.*r.*2.0)./(c3+c5.*r)+c5.*1.0./(c3+c5.*r).^2.*(c1+c2.*r+c4.*r.^2);
            else
                fz1 = @(r) -(c3 + c5*r - ((c3 + c5*r).^2 - c6*(4*c4*r.^2 + 4*c2*r + 4*c1)).^(1/2))/(2*c6);
                fz2 = @(r) -(c3 + c5*r + ((c3 + c5*r).^2 - c6*(4*c4*r.^2 + 4*c2*r + 4*c1)).^(1/2))/(2*c6);
                
                if abs(fz1(p2(1))-p2(2))<(p2(2)*1e-3)
                    fz = fz1;
                    fzdr = @(r) -(c5 + (c6*(4*c2 + 8*c4*r) - 2*c5*(c3 + c5*r))./(2*((c3 + c5*r).^2 - c6*(4*c4*r.^2 + 4*c2*r + 4*c1)).^(1/2)))/(2*c6);
                elseif abs(fz2(p2(1))-p2(2))<(p2(2)*1e-3)
                    fz = fz2;
                    fzdr = @(r) -(c5 - (c6*(4*c2 + 8*c4*r) - 2*c5*(c3 + c5*r))./(2*((c3 + c5*r).^2 - c6*(4*c4*r.^2 + 4*c2*r + 4*c1)).^(1/2)))/(2*c6);
                else
                    error('path function not exist');
                end
            end
            fr = @(r) r;
            dr = @(r) 1;
            Interval = [p1(1),p2(1)];
            if p1(1)>p2(1)
                dl = @(r) -sqrt(fzdr(r).^2+1);
            else
                dl = @(r) sqrt(fzdr(r).^2+1);
            end
        end
    end